/*****************************************************************************
 * File generated by HDevelop Version 20.11
 *
 * Do not modify!
 *****************************************************************************/

using System;
using System.IO;
using HalconDotNet;


/*
 * If you use this class in your program, you have to 
 * link against hdevenginedotnet.dll and halcondotnet.dll.
 * The Dlls are located in ${HALCONROOT}/bin/dotnet[20|35].
 *
 * The wrapped .hdev or .hdpl files have to be located in the folder
 * that is specified in the static ResourcePath property of 
 * DL_pn. 
 * By default, ResourcePath is ${binary_dir}/res_DL_pn.
 *
 * It is recommended to compile an assembly from this file using
 * the generated CMakeLists.txt.
 */

namespace DL_ns
{
  public static class DL_pn
  {

    public static void Rectangularity(
        HObject Image,
        out HObject Region1,
        HTuple Row,
        HTuple Column,
        HTuple Phi,
        HTuple Length1,
        HTuple Length2,
        HTuple thresh,
        out HTuple value)
    {     
      AddResourcePathToProcedurePath();
      using (HDevProcedureCall call = _Rectangularity.Value.CreateCall())
      {
        SetParameter(call,"Image",Image);
        SetParameter(call,"Row",Row);
        SetParameter(call,"Column",Column);
        SetParameter(call,"Phi",Phi);
        SetParameter(call,"Length1",Length1);
        SetParameter(call,"Length2",Length2);
        SetParameter(call,"thresh",thresh);
        call.Execute();
        Region1 = GetParameterHObject(call,"Region1");
        value = GetParameterHTuple(call,"value");
      }
    }

    public static void rotate_img(
        HObject Image,
        out HObject RotImage,
        HTuple Phi)
    {     
      AddResourcePathToProcedurePath();
      using (HDevProcedureCall call = _rotate_img.Value.CreateCall())
      {
        SetParameter(call,"Image",Image);
        SetParameter(call,"Phi",Phi);
        call.Execute();
        RotImage = GetParameterHObject(call,"RotImage");
      }
    }

    public static void save_image(
        HObject Image,
        HTuple folder)
    {     
      AddResourcePathToProcedurePath();
      using (HDevProcedureCall call = _save_image.Value.CreateCall())
      {
        SetParameter(call,"Image",Image);
        SetParameter(call,"folder",folder);
        call.Execute();
      }
    }

    public static void Threshold(
        HObject Image,
        out HObject Regions,
        HTuple Row,
        HTuple Column,
        HTuple Phi,
        HTuple Length1,
        HTuple Length2,
        HTuple thresh,
        out HTuple value)
    {     
      AddResourcePathToProcedurePath();
      using (HDevProcedureCall call = _Threshold.Value.CreateCall())
      {
        SetParameter(call,"Image",Image);
        SetParameter(call,"Row",Row);
        SetParameter(call,"Column",Column);
        SetParameter(call,"Phi",Phi);
        SetParameter(call,"Length1",Length1);
        SetParameter(call,"Length2",Length2);
        SetParameter(call,"thresh",thresh);
        call.Execute();
        Regions = GetParameterHObject(call,"Regions");
        value = GetParameterHTuple(call,"value");
      }
    }

    public static void Water_level(
        HObject Image,
        out HObject Region1,
        HTuple Row,
        HTuple Column,
        HTuple Length1,
        HTuple Length2,
        HTuple thresh,
        out HTuple level)
    {     
      AddResourcePathToProcedurePath();
      using (HDevProcedureCall call = _Water_level.Value.CreateCall())
      {
        SetParameter(call,"Image",Image);
        SetParameter(call,"Row",Row);
        SetParameter(call,"Column",Column);
        SetParameter(call,"Length1",Length1);
        SetParameter(call,"Length2",Length2);
        SetParameter(call,"thresh",thresh);
        call.Execute();
        Region1 = GetParameterHObject(call,"Region1");
        level = GetParameterHTuple(call,"level");
      }
    }

    public static void Wrinkles(
        HObject Image,
        out HObject SelectedRegions,
        HTuple min_ra,
        HTuple min_round,
        HTuple max_round,
        HTuple max_ra,
        HTuple Row,
        HTuple Column,
        HTuple Length1,
        HTuple Length2,
        out HTuple Number)
    {     
      AddResourcePathToProcedurePath();
      using (HDevProcedureCall call = _Wrinkles.Value.CreateCall())
      {
        SetParameter(call,"Image",Image);
        SetParameter(call,"min_ra",min_ra);
        SetParameter(call,"min_round",min_round);
        SetParameter(call,"max_round",max_round);
        SetParameter(call,"max_ra",max_ra);
        SetParameter(call,"Row",Row);
        SetParameter(call,"Column",Column);
        SetParameter(call,"Length1",Length1);
        SetParameter(call,"Length2",Length2);
        call.Execute();
        SelectedRegions = GetParameterHObject(call,"SelectedRegions");
        Number = GetParameterHTuple(call,"Number");
      }
    }


    /****************************************************************************
    * ResourcePath
    *****************************************************************************
    * Use ResourcePath in your application to specify the location of the 
    * HDevelop script or procedure library.
    *****************************************************************************/
    public static string ResourcePath
    {
      get
      {
        return _resource_path;
      }
      set
      {
        lock(_procedure_path_lock)
        {
          _procedure_path_initialized = false;
        }
        _resource_path = value;
      }
    }

#region Implementation details

    /* Implementation details of the wrapper class.
     * You do not have to use these functions ever.
     */

    private static bool _procedure_path_initialized = false;
    private static object _procedure_path_lock = new object();

    private static string _resource_path = "./res_DL_pn";

    private static Lazy<HDevProgram> _Program
            = new Lazy<HDevProgram>(() => new HDevProgram(Path.Combine(DL_pn.ResourcePath, "DutchLadyHalcon.hdev")));
    private static Lazy<HDevProcedure> _Rectangularity
            = new Lazy<HDevProcedure>(() => new HDevProcedure(_Program.Value, "Rectangularity"));
    private static Lazy<HDevProcedure> _rotate_img
            = new Lazy<HDevProcedure>(() => new HDevProcedure(_Program.Value, "rotate_img"));
    private static Lazy<HDevProcedure> _save_image
            = new Lazy<HDevProcedure>(() => new HDevProcedure(_Program.Value, "save_image"));
    private static Lazy<HDevProcedure> _Threshold
            = new Lazy<HDevProcedure>(() => new HDevProcedure(_Program.Value, "Threshold"));
    private static Lazy<HDevProcedure> _Water_level
            = new Lazy<HDevProcedure>(() => new HDevProcedure(_Program.Value, "Water_level"));
    private static Lazy<HDevProcedure> _Wrinkles
            = new Lazy<HDevProcedure>(() => new HDevProcedure(_Program.Value, "Wrinkles"));
        
    private static HTuple GetParameterHTuple(HDevProcedureCall call, string name)
    {
      return call.GetOutputCtrlParamTuple(name);
    }

    private static HObject GetParameterHObject(HDevProcedureCall call, string name)
    {
      return call.GetOutputIconicParamObject(name);
    }

    private static HTupleVector GetParameterHTupleVector(HDevProcedureCall call, string name)
    {
      return call.GetOutputCtrlParamVector(name);
    }

    private static HObjectVector GetParameterHObjectVector(HDevProcedureCall call, string name)
    {
      return call.GetOutputIconicParamVector(name);
    }

    private static void SetParameter(HDevProcedureCall call, string name, HTuple tuple)
    {
      call.SetInputCtrlParamTuple(name,tuple);
    }

    private static void SetParameter(HDevProcedureCall call, string name, HObject obj)
    {
      call.SetInputIconicParamObject(name,obj);
    }

    private static void SetParameter(HDevProcedureCall call, string name, HTupleVector vector)
    {
      call.SetInputCtrlParamVector(name,vector);
    }

    private static void SetParameter(HDevProcedureCall call, string name, HObjectVector vector)
    {
      call.SetInputIconicParamVector(name,vector);
    }

    private static void AddResourcePathToProcedurePath() 
    {
      lock(_procedure_path_lock)
      {
        if(!_procedure_path_initialized)
        {
          new HDevEngine().AddProcedurePath(ResourcePath);
          _procedure_path_initialized = true;
        }
      }
    }

#endregion

}
}